
CubeInc Unity Project to do list:

Completed:

-> base chunk generation
-> base physics
-> noclip
-> pause
-> wireframe
-> chunks store [][][] blocks
	-> air block used for empty space
-> jump forgiveness
-> letting go of jump will immediately drop down upward velocity
-> moving in air will have t increase slower
-> outline effect around selected voxel
-> raycast basic blocks to add or delete
-> m_lookBlock in its own class (code is a bit messy right now)
-> blocks only store only local position (no chunk/world)
-> streamline chunk/block classes

-> player stores chunk that it is currently in
-> create chunks around camera
-> only make chunks in view active
-> make chunk visibility check faster (just dot product)
-> use multithreading to generate chunks faster

-> scriptable objects for blocks
-> convert scriptable blocks to a giant texture atlas
-> generate uvs for voxels

-> fix texture bleeding with padding (padding = 1px per mipmap) + fix uvs for voxels with padding
-> merge block dictionary inside block manager

-> custom shader material for chunks
-> 2D texture array instead of atlas

-> block import setting, custom texture placement
	-> custom id per face potentially

-> block import settings go in resources
	-> doesn't require drag and drop in runtime manager if it can grabbed from there

-> import cubeinc textures

-> CanCameraSeeChunk()
	-> use range instead of a bajillion == checks

-> base perlin noise
	-> show on quad
	-> master switch to stop chunks from generating, easier to test unrelated stuff
	-> generate chunks with it
	-> 3D perlin noise

Phase 1: [Block Generation]

-> Improve Chunk Mesh Generation Speed
	
-> UI Debug, make colored text for on/off
	
-> UI selection -> edit/add (Arrow/gunpowder)
	-> Block type selection
	-> simple way of showing texture icon

-> commands (UI displays previous commands along with info on current command)
	-> Different tools
		-> shape: ball, square, line
		-> selection: (fill, delete, move, rotate, copy, paste)

(fun) -> particle effect when destroying a block

-> flag if chunk has never been edited (if no, don't save it)
-> save changed chunks
	-> pre-emptively add subid in saving for future

Phase 2: [Basic Light]

-> figure out how to add custom attributes
-> ambient occlusion as custom attribute

-> custom lighting (store light level in block)
-> store channels seperately for colored light

-> transparency pass
	-> transparent or cutout objects as an import option
	-> transparent ice and cutout glass for test

-> Debug show vertex/face count per chunk or in total
-> Logger class to keep track of how long specific actions took to complete
	-> time to create atlas, time to create chunk
		
Phase 3: [Intermediate Light + Post Process]

-> emission map texture possibility for import
-> 2nd atlas for emissions maps generated (default = black)

-> sunlight

-> skybox ; gradient colors ; day night cycle ???

-> environment mapping on blocks
	-> blocks get color of sky

-> unity post processing effects

-> colored fog possibility

-> other light effects?

Phase 4: [???]

-> weirdly shaped objects (life fences or half blocks)
	-> based on subid
	-> face cull system based on shape
	-> ambient occlusion custom based on shape

-> commands can modify subid now

-> Do some profiling to find any bottlenecks








		